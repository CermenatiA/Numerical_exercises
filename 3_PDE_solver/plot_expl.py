import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as pl

def Analytical_solution(x):
    return np.cos(np.pi*x/2)

data_0 = np.loadtxt('results_expl/numerical_solution_8_t_0.000000.dat')
data_1 = np.loadtxt('results_expl/numerical_solution_8_t_5.000000.dat')
data_2 = np.loadtxt('results_expl/numerical_solution_8_t_10.000000.dat')
data_3 = np.loadtxt('results_expl/numerical_solution_8_t_15.000000.dat')
data_4 = np.loadtxt('results_expl/numerical_solution_8_t_20.000000.dat')
data_5 = np.loadtxt('results_expl/numerical_solution_8_t_25.000000.dat')
data_6 = np.loadtxt('results_expl/numerical_solution_8_t_30.000000.dat')
data_7 = np.loadtxt('results_expl/numerical_solution_8_t_35.000000.dat')
data_8 = np.loadtxt('results_expl/numerical_solution_8_t_40.000000.dat')
data_9 = np.loadtxt('results_expl/numerical_solution_8_t_45.000000.dat')
data_10 = np.loadtxt('results_expl/numerical_solution_8_t_50.000000.dat')


pl.figure(figsize=(10,8.5))
pl.plot(data_0[:,0], data_0[:,1], label = "t = 0")
pl.plot(data_1[:,0], data_1[:,1], label = "t = 5")
pl.plot(data_2[:,0], data_2[:,1], label = "t = 10")
pl.plot(data_3[:,0], data_3[:,1], label = "t = 15")
pl.plot(data_4[:,0], data_4[:,1], label = "t = 20")
pl.plot(data_5[:,0], data_5[:,1], label = "t = 25")
pl.plot(data_6[:,0], data_6[:,1], label = "t = 30")
pl.plot(data_7[:,0], data_7[:,1], label = "t = 35")
pl.plot(data_8[:,0], data_8[:,1], label = "t = 40")
pl.plot(data_9[:,0], data_9[:,1], label = "t = 45")
pl.plot(data_10[:,0], data_10[:,1], label = "t = 50")
pl.xticks(size='xx-large')
pl.yticks(size='xx-large')
pl.legend(fontsize='large')
pl.title('Numerical solution at different time with 2^8 points on the spatial grid, explicit method')
pl.xlabel('X/H', size='xx-large')
pl.ylabel('u(x,t)', size='xx-large')
pl.grid()
pl.show()

error_0_8 = np.array([((data_0[e,1] - Analytical_solution(data_0[e,0]))/(Analytical_solution(data_0[e,0])))**2 for e in range(256)])
error_1_8 = np.array([((data_1[e,1] - Analytical_solution(data_1[e,0]))/(Analytical_solution(data_1[e,0])))**2 for e in range(256)])
error_2_8 = np.array([((data_2[e,1] - Analytical_solution(data_2[e,0]))/(Analytical_solution(data_2[e,0])))**2 for e in range(256)])
error_3_8 = np.array([((data_3[e,1] - Analytical_solution(data_3[e,0]))/(Analytical_solution(data_3[e,0])))**2 for e in range(256)])
error_4_8 = np.array([((data_4[e,1] - Analytical_solution(data_4[e,0]))/(Analytical_solution(data_4[e,0])))**2 for e in range(256)])
error_5_8 = np.array([((data_5[e,1] - Analytical_solution(data_5[e,0]))/(Analytical_solution(data_5[e,0])))**2 for e in range(256)])
error_6_8 = np.array([((data_6[e,1] - Analytical_solution(data_6[e,0]))/(Analytical_solution(data_6[e,0])))**2 for e in range(256)])
error_7_8 = np.array([((data_7[e,1] - Analytical_solution(data_7[e,0]))/(Analytical_solution(data_7[e,0])))**2 for e in range(256)])
error_8_8 = np.array([((data_8[e,1] - Analytical_solution(data_8[e,0]))/(Analytical_solution(data_8[e,0])))**2 for e in range(256)])
error_9_8 = np.array([((data_9[e,1] - Analytical_solution(data_9[e,0]))/(Analytical_solution(data_9[e,0])))**2 for e in range(256)])
error_10_8 = np.array([((data_10[e,1] - Analytical_solution(data_10[e,0]))/(Analytical_solution(data_10[e,0])))**2 for e in range(256)])

error_vec_8 = []
error_vec_8.append(error_0_8.sum()/(256**2))
error_vec_8.append(error_1_8.sum()/(256**2))
error_vec_8.append(error_2_8.sum()/(256**2))
error_vec_8.append(error_3_8.sum()/(256**2))
error_vec_8.append(error_4_8.sum()/(256**2))
error_vec_8.append(error_5_8.sum()/(256**2))
error_vec_8.append(error_6_8.sum()/(256**2))
error_vec_8.append(error_7_8.sum()/(256**2))
error_vec_8.append(error_8_8.sum()/(256**2))
error_vec_8.append(error_9_8.sum()/(256**2))
error_vec_8.append(error_10_8.sum()/(256**2))

time_vec = [0., 5., 10., 15., 20., 25., 30., 35., 40., 45., 50.]

data_0 = np.loadtxt('results_expl/numerical_solution_9_t_0.000000.dat')
data_1 = np.loadtxt('results_expl/numerical_solution_9_t_5.000000.dat')
data_2 = np.loadtxt('results_expl/numerical_solution_9_t_10.000000.dat')
data_3 = np.loadtxt('results_expl/numerical_solution_9_t_15.000000.dat')
data_4 = np.loadtxt('results_expl/numerical_solution_9_t_20.000000.dat')
data_5 = np.loadtxt('results_expl/numerical_solution_9_t_25.000000.dat')
data_6 = np.loadtxt('results_expl/numerical_solution_9_t_30.000000.dat')
data_7 = np.loadtxt('results_expl/numerical_solution_9_t_35.000000.dat')
data_8 = np.loadtxt('results_expl/numerical_solution_9_t_40.000000.dat')
data_9 = np.loadtxt('results_expl/numerical_solution_9_t_45.000000.dat')
data_10 = np.loadtxt('results_expl/numerical_solution_9_t_50.000000.dat')

error_0_9 = np.array([((data_0[e,1] - Analytical_solution(data_0[e,0]))/(Analytical_solution(data_0[e,0])))**2 for e in range(512)])
error_1_9 = np.array([((data_1[e,1] - Analytical_solution(data_1[e,0]))/(Analytical_solution(data_1[e,0])))**2 for e in range(512)])
error_2_9 = np.array([((data_2[e,1] - Analytical_solution(data_2[e,0]))/(Analytical_solution(data_2[e,0])))**2 for e in range(512)])
error_3_9 = np.array([((data_3[e,1] - Analytical_solution(data_3[e,0]))/(Analytical_solution(data_3[e,0])))**2 for e in range(512)])
error_4_9 = np.array([((data_4[e,1] - Analytical_solution(data_4[e,0]))/(Analytical_solution(data_4[e,0])))**2 for e in range(512)])
error_5_9 = np.array([((data_5[e,1] - Analytical_solution(data_5[e,0]))/(Analytical_solution(data_5[e,0])))**2 for e in range(512)])
error_6_9 = np.array([((data_6[e,1] - Analytical_solution(data_6[e,0]))/(Analytical_solution(data_6[e,0])))**2 for e in range(512)])
error_7_9 = np.array([((data_7[e,1] - Analytical_solution(data_7[e,0]))/(Analytical_solution(data_7[e,0])))**2 for e in range(512)])
error_8_9 = np.array([((data_8[e,1] - Analytical_solution(data_8[e,0]))/(Analytical_solution(data_8[e,0])))**2 for e in range(512)])
error_9_9 = np.array([((data_9[e,1] - Analytical_solution(data_9[e,0]))/(Analytical_solution(data_9[e,0])))**2 for e in range(512)])
error_10_9 = np.array([((data_10[e,1] - Analytical_solution(data_10[e,0]))/(Analytical_solution(data_10[e,0])))**2 for e in range(512)])

error_vec_9 = []
error_vec_9.append(error_0_9.sum()/(512**2))
error_vec_9.append(error_1_9.sum()/(512**2))
error_vec_9.append(error_2_9.sum()/(512**2))
error_vec_9.append(error_3_9.sum()/(512**2))
error_vec_9.append(error_4_9.sum()/(512**2))
error_vec_9.append(error_5_9.sum()/(512**2))
error_vec_9.append(error_6_9.sum()/(512**2))
error_vec_9.append(error_7_9.sum()/(512**2))
error_vec_9.append(error_8_9.sum()/(512**2))
error_vec_9.append(error_9_9.sum()/(512**2))
error_vec_9.append(error_10_9.sum()/(512**2))

data_0 = np.loadtxt('results_expl/numerical_solution_10_t_0.000000.dat')
data_1 = np.loadtxt('results_expl/numerical_solution_10_t_5.000000.dat')
data_2 = np.loadtxt('results_expl/numerical_solution_10_t_10.000000.dat')
data_3 = np.loadtxt('results_expl/numerical_solution_10_t_15.000000.dat')
data_4 = np.loadtxt('results_expl/numerical_solution_10_t_20.000000.dat')
data_5 = np.loadtxt('results_expl/numerical_solution_10_t_25.000000.dat')
data_6 = np.loadtxt('results_expl/numerical_solution_10_t_30.000000.dat')
data_7 = np.loadtxt('results_expl/numerical_solution_10_t_35.000000.dat')
data_8 = np.loadtxt('results_expl/numerical_solution_10_t_40.000000.dat')
data_9 = np.loadtxt('results_expl/numerical_solution_10_t_45.000000.dat')
data_10 = np.loadtxt('results_expl/numerical_solution_10_t_50.000000.dat')

error_0_10 = np.array([((data_0[e,1] - Analytical_solution(data_0[e,0]))/(Analytical_solution(data_0[e,0])))**2 for e in range(1024)])
error_1_10 = np.array([((data_1[e,1] - Analytical_solution(data_1[e,0]))/(Analytical_solution(data_1[e,0])))**2 for e in range(1024)])
error_2_10 = np.array([((data_2[e,1] - Analytical_solution(data_2[e,0]))/(Analytical_solution(data_2[e,0])))**2 for e in range(1024)])
error_3_10 = np.array([((data_3[e,1] - Analytical_solution(data_3[e,0]))/(Analytical_solution(data_3[e,0])))**2 for e in range(1024)])
error_4_10 = np.array([((data_4[e,1] - Analytical_solution(data_4[e,0]))/(Analytical_solution(data_4[e,0])))**2 for e in range(1024)])
error_5_10 = np.array([((data_5[e,1] - Analytical_solution(data_5[e,0]))/(Analytical_solution(data_5[e,0])))**2 for e in range(1024)])
error_6_10 = np.array([((data_6[e,1] - Analytical_solution(data_6[e,0]))/(Analytical_solution(data_6[e,0])))**2 for e in range(1024)])
error_7_10 = np.array([((data_7[e,1] - Analytical_solution(data_7[e,0]))/(Analytical_solution(data_7[e,0])))**2 for e in range(1024)])
error_8_10 = np.array([((data_8[e,1] - Analytical_solution(data_8[e,0]))/(Analytical_solution(data_8[e,0])))**2 for e in range(1024)])
error_9_10 = np.array([((data_9[e,1] - Analytical_solution(data_9[e,0]))/(Analytical_solution(data_9[e,0])))**2 for e in range(1024)])
error_10_10 = np.array([((data_10[e,1] - Analytical_solution(data_10[e,0]))/(Analytical_solution(data_10[e,0])))**2 for e in range(1024)])

error_vec_10 = []
error_vec_10.append(error_0_10.sum()/(1024**2))
error_vec_10.append(error_1_10.sum()/(1024**2))
error_vec_10.append(error_2_10.sum()/(1024**2))
error_vec_10.append(error_3_10.sum()/(1024**2))
error_vec_10.append(error_4_10.sum()/(1024**2))
error_vec_10.append(error_5_10.sum()/(1024**2))
error_vec_10.append(error_6_10.sum()/(1024**2))
error_vec_10.append(error_7_10.sum()/(1024**2))
error_vec_10.append(error_8_10.sum()/(1024**2))
error_vec_10.append(error_9_10.sum()/(1024**2))
error_vec_10.append(error_10_10.sum()/(1024**2))


pl.figure(figsize=(10,8.5))
pl.plot(time_vec, error_vec_8, label='N = 2^8')
pl.plot(time_vec, error_vec_9, label='N = 2^9')
pl.plot(time_vec, error_vec_10, label='N = 2^10')
pl.xticks(size='xx-large')
pl.yticks(size='xx-large')
pl.title('Error_N (T) = 1/N^2 x Sum_i [ (f_num(x_i) - f_an(x_i))/f_an(x_i) ]^2 , Explicit method', size='x-large')
pl.yscale('log')
pl.ylim(1e-6,1e-2)
pl.xlabel('T', size='xx-large')
pl.ylabel('error_N (T)', size='xx-large')
pl.legend(fontsize='large')
pl.grid()
pl.show()

relative_8_9 = np.array(error_vec_8[:])/np.array(error_vec_9[:])
relative_8_10 = np.array(error_vec_8[:])/np.array(error_vec_10[:])
relative_9_10 = np.array(error_vec_9[:])/np.array(error_vec_10[:])

pl.figure(figsize=(10,8.5))
pl.plot(time_vec, relative_8_9, label='N=8/N=9')
pl.plot(time_vec, relative_9_10, label='N=9/N=10')
pl.plot(time_vec, relative_8_10, label='N=8/N=10')
pl.xticks(size='xx-large')
pl.yticks(size='xx-large')
pl.title('Relatives error (N/(N+1)) = Error(N) / Error(N+1), Explicit method')
pl.ylim(1,17)
pl.xlabel('T', size='xx-large')
pl.ylabel('Relative Errors', size='xx-large')
pl.legend(fontsize='large')
pl.grid()
pl.show()

